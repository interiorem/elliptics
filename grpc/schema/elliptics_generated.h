// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ELLIPTICS_FB_GRPC_DNET_H_
#define FLATBUFFERS_GENERATED_ELLIPTICS_FB_GRPC_DNET_H_

#include "flatbuffers/flatbuffers.h"

namespace fb_grpc_dnet {

struct Cmd;

struct Time;

struct WriteRequestHeader;

struct WriteRequest;

struct LookupResponse;

struct ReadRequest;

struct ReadResponseHeader;

struct ReadResponse;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Time FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t sec_;
  uint64_t nsec_;

 public:
  Time() {
    memset(this, 0, sizeof(Time));
  }
  Time(uint64_t _sec, uint64_t _nsec)
      : sec_(flatbuffers::EndianScalar(_sec)),
        nsec_(flatbuffers::EndianScalar(_nsec)) {
  }
  uint64_t sec() const {
    return flatbuffers::EndianScalar(sec_);
  }
  uint64_t nsec() const {
    return flatbuffers::EndianScalar(nsec_);
  }
};
FLATBUFFERS_STRUCT_END(Time, 16);

struct Cmd FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_GROUP_ID = 6,
    VT_STATUS = 8,
    VT_CMD = 10,
    VT_BACKEND_ID = 12,
    VT_TRACE_ID = 14,
    VT_FLAGS = 16,
    VT_TRANS = 18
  };
  const flatbuffers::Vector<uint8_t> *id() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ID);
  }
  uint32_t group_id() const {
    return GetField<uint32_t>(VT_GROUP_ID, 0);
  }
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  int32_t cmd() const {
    return GetField<int32_t>(VT_CMD, 0);
  }
  int32_t backend_id() const {
    return GetField<int32_t>(VT_BACKEND_ID, 0);
  }
  uint64_t trace_id() const {
    return GetField<uint64_t>(VT_TRACE_ID, 0);
  }
  uint64_t flags() const {
    return GetField<uint64_t>(VT_FLAGS, 0);
  }
  uint64_t trans() const {
    return GetField<uint64_t>(VT_TRANS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyVector(id()) &&
           VerifyField<uint32_t>(verifier, VT_GROUP_ID) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           VerifyField<int32_t>(verifier, VT_CMD) &&
           VerifyField<int32_t>(verifier, VT_BACKEND_ID) &&
           VerifyField<uint64_t>(verifier, VT_TRACE_ID) &&
           VerifyField<uint64_t>(verifier, VT_FLAGS) &&
           VerifyField<uint64_t>(verifier, VT_TRANS) &&
           verifier.EndTable();
  }
};

struct CmdBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> id) {
    fbb_.AddOffset(Cmd::VT_ID, id);
  }
  void add_group_id(uint32_t group_id) {
    fbb_.AddElement<uint32_t>(Cmd::VT_GROUP_ID, group_id, 0);
  }
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(Cmd::VT_STATUS, status, 0);
  }
  void add_cmd(int32_t cmd) {
    fbb_.AddElement<int32_t>(Cmd::VT_CMD, cmd, 0);
  }
  void add_backend_id(int32_t backend_id) {
    fbb_.AddElement<int32_t>(Cmd::VT_BACKEND_ID, backend_id, 0);
  }
  void add_trace_id(uint64_t trace_id) {
    fbb_.AddElement<uint64_t>(Cmd::VT_TRACE_ID, trace_id, 0);
  }
  void add_flags(uint64_t flags) {
    fbb_.AddElement<uint64_t>(Cmd::VT_FLAGS, flags, 0);
  }
  void add_trans(uint64_t trans) {
    fbb_.AddElement<uint64_t>(Cmd::VT_TRANS, trans, 0);
  }
  explicit CmdBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CmdBuilder &operator=(const CmdBuilder &);
  flatbuffers::Offset<Cmd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Cmd>(end);
    return o;
  }
};

inline flatbuffers::Offset<Cmd> CreateCmd(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> id = 0,
    uint32_t group_id = 0,
    int32_t status = 0,
    int32_t cmd = 0,
    int32_t backend_id = 0,
    uint64_t trace_id = 0,
    uint64_t flags = 0,
    uint64_t trans = 0) {
  CmdBuilder builder_(_fbb);
  builder_.add_trans(trans);
  builder_.add_flags(flags);
  builder_.add_trace_id(trace_id);
  builder_.add_backend_id(backend_id);
  builder_.add_cmd(cmd);
  builder_.add_status(status);
  builder_.add_group_id(group_id);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Cmd> CreateCmdDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *id = nullptr,
    uint32_t group_id = 0,
    int32_t status = 0,
    int32_t cmd = 0,
    int32_t backend_id = 0,
    uint64_t trace_id = 0,
    uint64_t flags = 0,
    uint64_t trans = 0) {
  return fb_grpc_dnet::CreateCmd(
      _fbb,
      id ? _fbb.CreateVector<uint8_t>(*id) : 0,
      group_id,
      status,
      cmd,
      backend_id,
      trace_id,
      flags,
      trans);
}

struct WriteRequestHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CMD = 4,
    VT_IOFLAGS = 6,
    VT_USER_FLAGS = 8,
    VT_JSON_SIZE = 10,
    VT_JSON_CAPACITY = 12,
    VT_JSON_TIMESTAMP = 14,
    VT_DATA_OFFSET = 16,
    VT_DATA_SIZE = 18,
    VT_DATA_CAPACITY = 20,
    VT_DATA_TIMESTAMP = 22,
    VT_DATA_COMMIT_SIZE = 24,
    VT_CACHE_LIFETIME = 26
  };
  const Cmd *cmd() const {
    return GetPointer<const Cmd *>(VT_CMD);
  }
  uint64_t ioflags() const {
    return GetField<uint64_t>(VT_IOFLAGS, 0);
  }
  uint64_t user_flags() const {
    return GetField<uint64_t>(VT_USER_FLAGS, 0);
  }
  uint64_t json_size() const {
    return GetField<uint64_t>(VT_JSON_SIZE, 0);
  }
  uint64_t json_capacity() const {
    return GetField<uint64_t>(VT_JSON_CAPACITY, 0);
  }
  uint64_t json_timestamp() const {
    return GetField<uint64_t>(VT_JSON_TIMESTAMP, 0);
  }
  uint64_t data_offset() const {
    return GetField<uint64_t>(VT_DATA_OFFSET, 0);
  }
  uint64_t data_size() const {
    return GetField<uint64_t>(VT_DATA_SIZE, 0);
  }
  uint64_t data_capacity() const {
    return GetField<uint64_t>(VT_DATA_CAPACITY, 0);
  }
  uint64_t data_timestamp() const {
    return GetField<uint64_t>(VT_DATA_TIMESTAMP, 0);
  }
  uint64_t data_commit_size() const {
    return GetField<uint64_t>(VT_DATA_COMMIT_SIZE, 0);
  }
  uint64_t cache_lifetime() const {
    return GetField<uint64_t>(VT_CACHE_LIFETIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CMD) &&
           verifier.VerifyTable(cmd()) &&
           VerifyField<uint64_t>(verifier, VT_IOFLAGS) &&
           VerifyField<uint64_t>(verifier, VT_USER_FLAGS) &&
           VerifyField<uint64_t>(verifier, VT_JSON_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_JSON_CAPACITY) &&
           VerifyField<uint64_t>(verifier, VT_JSON_TIMESTAMP) &&
           VerifyField<uint64_t>(verifier, VT_DATA_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_DATA_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_DATA_CAPACITY) &&
           VerifyField<uint64_t>(verifier, VT_DATA_TIMESTAMP) &&
           VerifyField<uint64_t>(verifier, VT_DATA_COMMIT_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_CACHE_LIFETIME) &&
           verifier.EndTable();
  }
};

struct WriteRequestHeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cmd(flatbuffers::Offset<Cmd> cmd) {
    fbb_.AddOffset(WriteRequestHeader::VT_CMD, cmd);
  }
  void add_ioflags(uint64_t ioflags) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_IOFLAGS, ioflags, 0);
  }
  void add_user_flags(uint64_t user_flags) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_USER_FLAGS, user_flags, 0);
  }
  void add_json_size(uint64_t json_size) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_JSON_SIZE, json_size, 0);
  }
  void add_json_capacity(uint64_t json_capacity) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_JSON_CAPACITY, json_capacity, 0);
  }
  void add_json_timestamp(uint64_t json_timestamp) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_JSON_TIMESTAMP, json_timestamp, 0);
  }
  void add_data_offset(uint64_t data_offset) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_DATA_OFFSET, data_offset, 0);
  }
  void add_data_size(uint64_t data_size) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_DATA_SIZE, data_size, 0);
  }
  void add_data_capacity(uint64_t data_capacity) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_DATA_CAPACITY, data_capacity, 0);
  }
  void add_data_timestamp(uint64_t data_timestamp) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_DATA_TIMESTAMP, data_timestamp, 0);
  }
  void add_data_commit_size(uint64_t data_commit_size) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_DATA_COMMIT_SIZE, data_commit_size, 0);
  }
  void add_cache_lifetime(uint64_t cache_lifetime) {
    fbb_.AddElement<uint64_t>(WriteRequestHeader::VT_CACHE_LIFETIME, cache_lifetime, 0);
  }
  explicit WriteRequestHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WriteRequestHeaderBuilder &operator=(const WriteRequestHeaderBuilder &);
  flatbuffers::Offset<WriteRequestHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WriteRequestHeader>(end);
    fbb_.Required(o, WriteRequestHeader::VT_CMD);
    return o;
  }
};

inline flatbuffers::Offset<WriteRequestHeader> CreateWriteRequestHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Cmd> cmd = 0,
    uint64_t ioflags = 0,
    uint64_t user_flags = 0,
    uint64_t json_size = 0,
    uint64_t json_capacity = 0,
    uint64_t json_timestamp = 0,
    uint64_t data_offset = 0,
    uint64_t data_size = 0,
    uint64_t data_capacity = 0,
    uint64_t data_timestamp = 0,
    uint64_t data_commit_size = 0,
    uint64_t cache_lifetime = 0) {
  WriteRequestHeaderBuilder builder_(_fbb);
  builder_.add_cache_lifetime(cache_lifetime);
  builder_.add_data_commit_size(data_commit_size);
  builder_.add_data_timestamp(data_timestamp);
  builder_.add_data_capacity(data_capacity);
  builder_.add_data_size(data_size);
  builder_.add_data_offset(data_offset);
  builder_.add_json_timestamp(json_timestamp);
  builder_.add_json_capacity(json_capacity);
  builder_.add_json_size(json_size);
  builder_.add_user_flags(user_flags);
  builder_.add_ioflags(ioflags);
  builder_.add_cmd(cmd);
  return builder_.Finish();
}

struct WriteRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4,
    VT_JSON = 6,
    VT_DATA = 8
  };
  const WriteRequestHeader *header() const {
    return GetPointer<const WriteRequestHeader *>(VT_HEADER);
  }
  const flatbuffers::Vector<uint8_t> *json() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_JSON);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_JSON) &&
           verifier.VerifyVector(json()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct WriteRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<WriteRequestHeader> header) {
    fbb_.AddOffset(WriteRequest::VT_HEADER, header);
  }
  void add_json(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> json) {
    fbb_.AddOffset(WriteRequest::VT_JSON, json);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(WriteRequest::VT_DATA, data);
  }
  explicit WriteRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WriteRequestBuilder &operator=(const WriteRequestBuilder &);
  flatbuffers::Offset<WriteRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WriteRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<WriteRequest> CreateWriteRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<WriteRequestHeader> header = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> json = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  WriteRequestBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_json(json);
  builder_.add_header(header);
  return builder_.Finish();
}

inline flatbuffers::Offset<WriteRequest> CreateWriteRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<WriteRequestHeader> header = 0,
    const std::vector<uint8_t> *json = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  return fb_grpc_dnet::CreateWriteRequest(
      _fbb,
      header,
      json ? _fbb.CreateVector<uint8_t>(*json) : 0,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

struct LookupResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CMD = 4,
    VT_RECORD_FLAGS = 6,
    VT_USER_FLAGS = 8,
    VT_PATH = 10,
    VT_JSON_TIMESTAMP = 12,
    VT_JSON_OFFSET = 14,
    VT_JSON_SIZE = 16,
    VT_JSON_CAPACITY = 18,
    VT_JSON_CHECKSUM = 20,
    VT_DATA_TIMESTAMP = 22,
    VT_DATA_OFFSET = 24,
    VT_DATA_SIZE = 26,
    VT_DATA_CHECKSUM = 28
  };
  const Cmd *cmd() const {
    return GetPointer<const Cmd *>(VT_CMD);
  }
  uint64_t record_flags() const {
    return GetField<uint64_t>(VT_RECORD_FLAGS, 0);
  }
  uint64_t user_flags() const {
    return GetField<uint64_t>(VT_USER_FLAGS, 0);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  uint64_t json_timestamp() const {
    return GetField<uint64_t>(VT_JSON_TIMESTAMP, 0);
  }
  uint64_t json_offset() const {
    return GetField<uint64_t>(VT_JSON_OFFSET, 0);
  }
  uint64_t json_size() const {
    return GetField<uint64_t>(VT_JSON_SIZE, 0);
  }
  uint64_t json_capacity() const {
    return GetField<uint64_t>(VT_JSON_CAPACITY, 0);
  }
  const flatbuffers::Vector<uint8_t> *json_checksum() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_JSON_CHECKSUM);
  }
  uint64_t data_timestamp() const {
    return GetField<uint64_t>(VT_DATA_TIMESTAMP, 0);
  }
  uint64_t data_offset() const {
    return GetField<uint64_t>(VT_DATA_OFFSET, 0);
  }
  uint64_t data_size() const {
    return GetField<uint64_t>(VT_DATA_SIZE, 0);
  }
  const flatbuffers::Vector<uint8_t> *data_checksum() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA_CHECKSUM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CMD) &&
           verifier.VerifyTable(cmd()) &&
           VerifyField<uint64_t>(verifier, VT_RECORD_FLAGS) &&
           VerifyField<uint64_t>(verifier, VT_USER_FLAGS) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyField<uint64_t>(verifier, VT_JSON_TIMESTAMP) &&
           VerifyField<uint64_t>(verifier, VT_JSON_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_JSON_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_JSON_CAPACITY) &&
           VerifyOffset(verifier, VT_JSON_CHECKSUM) &&
           verifier.VerifyVector(json_checksum()) &&
           VerifyField<uint64_t>(verifier, VT_DATA_TIMESTAMP) &&
           VerifyField<uint64_t>(verifier, VT_DATA_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_DATA_SIZE) &&
           VerifyOffset(verifier, VT_DATA_CHECKSUM) &&
           verifier.VerifyVector(data_checksum()) &&
           verifier.EndTable();
  }
};

struct LookupResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cmd(flatbuffers::Offset<Cmd> cmd) {
    fbb_.AddOffset(LookupResponse::VT_CMD, cmd);
  }
  void add_record_flags(uint64_t record_flags) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_RECORD_FLAGS, record_flags, 0);
  }
  void add_user_flags(uint64_t user_flags) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_USER_FLAGS, user_flags, 0);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(LookupResponse::VT_PATH, path);
  }
  void add_json_timestamp(uint64_t json_timestamp) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_JSON_TIMESTAMP, json_timestamp, 0);
  }
  void add_json_offset(uint64_t json_offset) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_JSON_OFFSET, json_offset, 0);
  }
  void add_json_size(uint64_t json_size) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_JSON_SIZE, json_size, 0);
  }
  void add_json_capacity(uint64_t json_capacity) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_JSON_CAPACITY, json_capacity, 0);
  }
  void add_json_checksum(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> json_checksum) {
    fbb_.AddOffset(LookupResponse::VT_JSON_CHECKSUM, json_checksum);
  }
  void add_data_timestamp(uint64_t data_timestamp) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_DATA_TIMESTAMP, data_timestamp, 0);
  }
  void add_data_offset(uint64_t data_offset) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_DATA_OFFSET, data_offset, 0);
  }
  void add_data_size(uint64_t data_size) {
    fbb_.AddElement<uint64_t>(LookupResponse::VT_DATA_SIZE, data_size, 0);
  }
  void add_data_checksum(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data_checksum) {
    fbb_.AddOffset(LookupResponse::VT_DATA_CHECKSUM, data_checksum);
  }
  explicit LookupResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LookupResponseBuilder &operator=(const LookupResponseBuilder &);
  flatbuffers::Offset<LookupResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LookupResponse>(end);
    fbb_.Required(o, LookupResponse::VT_CMD);
    return o;
  }
};

inline flatbuffers::Offset<LookupResponse> CreateLookupResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Cmd> cmd = 0,
    uint64_t record_flags = 0,
    uint64_t user_flags = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    uint64_t json_timestamp = 0,
    uint64_t json_offset = 0,
    uint64_t json_size = 0,
    uint64_t json_capacity = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> json_checksum = 0,
    uint64_t data_timestamp = 0,
    uint64_t data_offset = 0,
    uint64_t data_size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data_checksum = 0) {
  LookupResponseBuilder builder_(_fbb);
  builder_.add_data_size(data_size);
  builder_.add_data_offset(data_offset);
  builder_.add_data_timestamp(data_timestamp);
  builder_.add_json_capacity(json_capacity);
  builder_.add_json_size(json_size);
  builder_.add_json_offset(json_offset);
  builder_.add_json_timestamp(json_timestamp);
  builder_.add_user_flags(user_flags);
  builder_.add_record_flags(record_flags);
  builder_.add_data_checksum(data_checksum);
  builder_.add_json_checksum(json_checksum);
  builder_.add_path(path);
  builder_.add_cmd(cmd);
  return builder_.Finish();
}

inline flatbuffers::Offset<LookupResponse> CreateLookupResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Cmd> cmd = 0,
    uint64_t record_flags = 0,
    uint64_t user_flags = 0,
    const char *path = nullptr,
    uint64_t json_timestamp = 0,
    uint64_t json_offset = 0,
    uint64_t json_size = 0,
    uint64_t json_capacity = 0,
    const std::vector<uint8_t> *json_checksum = nullptr,
    uint64_t data_timestamp = 0,
    uint64_t data_offset = 0,
    uint64_t data_size = 0,
    const std::vector<uint8_t> *data_checksum = nullptr) {
  return fb_grpc_dnet::CreateLookupResponse(
      _fbb,
      cmd,
      record_flags,
      user_flags,
      path ? _fbb.CreateString(path) : 0,
      json_timestamp,
      json_offset,
      json_size,
      json_capacity,
      json_checksum ? _fbb.CreateVector<uint8_t>(*json_checksum) : 0,
      data_timestamp,
      data_offset,
      data_size,
      data_checksum ? _fbb.CreateVector<uint8_t>(*data_checksum) : 0);
}

struct ReadRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CMD = 4,
    VT_IOFLAGS = 6,
    VT_READ_FLAGS = 8,
    VT_DATA_OFFSET = 10,
    VT_DATA_SIZE = 12
  };
  const Cmd *cmd() const {
    return GetPointer<const Cmd *>(VT_CMD);
  }
  uint64_t ioflags() const {
    return GetField<uint64_t>(VT_IOFLAGS, 0);
  }
  uint64_t read_flags() const {
    return GetField<uint64_t>(VT_READ_FLAGS, 0);
  }
  uint64_t data_offset() const {
    return GetField<uint64_t>(VT_DATA_OFFSET, 0);
  }
  uint64_t data_size() const {
    return GetField<uint64_t>(VT_DATA_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CMD) &&
           verifier.VerifyTable(cmd()) &&
           VerifyField<uint64_t>(verifier, VT_IOFLAGS) &&
           VerifyField<uint64_t>(verifier, VT_READ_FLAGS) &&
           VerifyField<uint64_t>(verifier, VT_DATA_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_DATA_SIZE) &&
           verifier.EndTable();
  }
};

struct ReadRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cmd(flatbuffers::Offset<Cmd> cmd) {
    fbb_.AddOffset(ReadRequest::VT_CMD, cmd);
  }
  void add_ioflags(uint64_t ioflags) {
    fbb_.AddElement<uint64_t>(ReadRequest::VT_IOFLAGS, ioflags, 0);
  }
  void add_read_flags(uint64_t read_flags) {
    fbb_.AddElement<uint64_t>(ReadRequest::VT_READ_FLAGS, read_flags, 0);
  }
  void add_data_offset(uint64_t data_offset) {
    fbb_.AddElement<uint64_t>(ReadRequest::VT_DATA_OFFSET, data_offset, 0);
  }
  void add_data_size(uint64_t data_size) {
    fbb_.AddElement<uint64_t>(ReadRequest::VT_DATA_SIZE, data_size, 0);
  }
  explicit ReadRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReadRequestBuilder &operator=(const ReadRequestBuilder &);
  flatbuffers::Offset<ReadRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReadRequest>(end);
    fbb_.Required(o, ReadRequest::VT_CMD);
    return o;
  }
};

inline flatbuffers::Offset<ReadRequest> CreateReadRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Cmd> cmd = 0,
    uint64_t ioflags = 0,
    uint64_t read_flags = 0,
    uint64_t data_offset = 0,
    uint64_t data_size = 0) {
  ReadRequestBuilder builder_(_fbb);
  builder_.add_data_size(data_size);
  builder_.add_data_offset(data_offset);
  builder_.add_read_flags(read_flags);
  builder_.add_ioflags(ioflags);
  builder_.add_cmd(cmd);
  return builder_.Finish();
}

struct ReadResponseHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CMD = 4,
    VT_RECORD_FLAGS = 6,
    VT_USER_FLAGS = 8,
    VT_JSON_TIMESTAMP = 10,
    VT_JSON_SIZE = 12,
    VT_JSON_CAPACITY = 14,
    VT_READ_JSON_SIZE = 16,
    VT_DATA_TIMESTAMP = 18,
    VT_DATA_SIZE = 20,
    VT_READ_DATA_OFFSET = 22,
    VT_READ_DATA_SIZE = 24
  };
  const Cmd *cmd() const {
    return GetPointer<const Cmd *>(VT_CMD);
  }
  uint64_t record_flags() const {
    return GetField<uint64_t>(VT_RECORD_FLAGS, 0);
  }
  uint64_t user_flags() const {
    return GetField<uint64_t>(VT_USER_FLAGS, 0);
  }
  uint64_t json_timestamp() const {
    return GetField<uint64_t>(VT_JSON_TIMESTAMP, 0);
  }
  uint64_t json_size() const {
    return GetField<uint64_t>(VT_JSON_SIZE, 0);
  }
  uint64_t json_capacity() const {
    return GetField<uint64_t>(VT_JSON_CAPACITY, 0);
  }
  uint64_t read_json_size() const {
    return GetField<uint64_t>(VT_READ_JSON_SIZE, 0);
  }
  uint64_t data_timestamp() const {
    return GetField<uint64_t>(VT_DATA_TIMESTAMP, 0);
  }
  uint64_t data_size() const {
    return GetField<uint64_t>(VT_DATA_SIZE, 0);
  }
  uint64_t read_data_offset() const {
    return GetField<uint64_t>(VT_READ_DATA_OFFSET, 0);
  }
  uint64_t read_data_size() const {
    return GetField<uint64_t>(VT_READ_DATA_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_CMD) &&
           verifier.VerifyTable(cmd()) &&
           VerifyField<uint64_t>(verifier, VT_RECORD_FLAGS) &&
           VerifyField<uint64_t>(verifier, VT_USER_FLAGS) &&
           VerifyField<uint64_t>(verifier, VT_JSON_TIMESTAMP) &&
           VerifyField<uint64_t>(verifier, VT_JSON_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_JSON_CAPACITY) &&
           VerifyField<uint64_t>(verifier, VT_READ_JSON_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_DATA_TIMESTAMP) &&
           VerifyField<uint64_t>(verifier, VT_DATA_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_READ_DATA_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_READ_DATA_SIZE) &&
           verifier.EndTable();
  }
};

struct ReadResponseHeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cmd(flatbuffers::Offset<Cmd> cmd) {
    fbb_.AddOffset(ReadResponseHeader::VT_CMD, cmd);
  }
  void add_record_flags(uint64_t record_flags) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_RECORD_FLAGS, record_flags, 0);
  }
  void add_user_flags(uint64_t user_flags) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_USER_FLAGS, user_flags, 0);
  }
  void add_json_timestamp(uint64_t json_timestamp) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_JSON_TIMESTAMP, json_timestamp, 0);
  }
  void add_json_size(uint64_t json_size) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_JSON_SIZE, json_size, 0);
  }
  void add_json_capacity(uint64_t json_capacity) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_JSON_CAPACITY, json_capacity, 0);
  }
  void add_read_json_size(uint64_t read_json_size) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_READ_JSON_SIZE, read_json_size, 0);
  }
  void add_data_timestamp(uint64_t data_timestamp) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_DATA_TIMESTAMP, data_timestamp, 0);
  }
  void add_data_size(uint64_t data_size) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_DATA_SIZE, data_size, 0);
  }
  void add_read_data_offset(uint64_t read_data_offset) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_READ_DATA_OFFSET, read_data_offset, 0);
  }
  void add_read_data_size(uint64_t read_data_size) {
    fbb_.AddElement<uint64_t>(ReadResponseHeader::VT_READ_DATA_SIZE, read_data_size, 0);
  }
  explicit ReadResponseHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReadResponseHeaderBuilder &operator=(const ReadResponseHeaderBuilder &);
  flatbuffers::Offset<ReadResponseHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReadResponseHeader>(end);
    fbb_.Required(o, ReadResponseHeader::VT_CMD);
    return o;
  }
};

inline flatbuffers::Offset<ReadResponseHeader> CreateReadResponseHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Cmd> cmd = 0,
    uint64_t record_flags = 0,
    uint64_t user_flags = 0,
    uint64_t json_timestamp = 0,
    uint64_t json_size = 0,
    uint64_t json_capacity = 0,
    uint64_t read_json_size = 0,
    uint64_t data_timestamp = 0,
    uint64_t data_size = 0,
    uint64_t read_data_offset = 0,
    uint64_t read_data_size = 0) {
  ReadResponseHeaderBuilder builder_(_fbb);
  builder_.add_read_data_size(read_data_size);
  builder_.add_read_data_offset(read_data_offset);
  builder_.add_data_size(data_size);
  builder_.add_data_timestamp(data_timestamp);
  builder_.add_read_json_size(read_json_size);
  builder_.add_json_capacity(json_capacity);
  builder_.add_json_size(json_size);
  builder_.add_json_timestamp(json_timestamp);
  builder_.add_user_flags(user_flags);
  builder_.add_record_flags(record_flags);
  builder_.add_cmd(cmd);
  return builder_.Finish();
}

struct ReadResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INFO = 4,
    VT_JSON = 6,
    VT_DATA = 8
  };
  const ReadResponseHeader *info() const {
    return GetPointer<const ReadResponseHeader *>(VT_INFO);
  }
  const flatbuffers::Vector<uint8_t> *json() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_JSON);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.VerifyTable(info()) &&
           VerifyOffset(verifier, VT_JSON) &&
           verifier.VerifyVector(json()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ReadResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_info(flatbuffers::Offset<ReadResponseHeader> info) {
    fbb_.AddOffset(ReadResponse::VT_INFO, info);
  }
  void add_json(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> json) {
    fbb_.AddOffset(ReadResponse::VT_JSON, json);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(ReadResponse::VT_DATA, data);
  }
  explicit ReadResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReadResponseBuilder &operator=(const ReadResponseBuilder &);
  flatbuffers::Offset<ReadResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReadResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReadResponse> CreateReadResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ReadResponseHeader> info = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> json = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  ReadResponseBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_json(json);
  builder_.add_info(info);
  return builder_.Finish();
}

inline flatbuffers::Offset<ReadResponse> CreateReadResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ReadResponseHeader> info = 0,
    const std::vector<uint8_t> *json = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  return fb_grpc_dnet::CreateReadResponse(
      _fbb,
      info,
      json ? _fbb.CreateVector<uint8_t>(*json) : 0,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

}  // namespace fb_grpc_dnet

#endif  // FLATBUFFERS_GENERATED_ELLIPTICS_FB_GRPC_DNET_H_
