// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elliptics
#ifndef GRPC_elliptics__INCLUDED
#define GRPC_elliptics__INCLUDED

#include "elliptics_generated.h"
#include "flatbuffers/grpc.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace fb_grpc_dnet {

class Elliptics final {
 public:
  static constexpr char const* service_full_name() {
    return "fb_grpc_dnet.Elliptics";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< flatbuffers::grpc::Message<WriteRequest>>> Write(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< flatbuffers::grpc::Message<WriteRequest>>>(WriteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<WriteRequest>>> AsyncWrite(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<WriteRequest>>>(AsyncWriteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<WriteRequest>>> PrepareAsyncWrite(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<WriteRequest>>>(PrepareAsyncWriteRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< flatbuffers::grpc::Message<ReadResponse>>> Read(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< flatbuffers::grpc::Message<ReadResponse>>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< flatbuffers::grpc::Message<ReadResponse>>> AsyncRead(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< flatbuffers::grpc::Message<ReadResponse>>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< flatbuffers::grpc::Message<ReadResponse>>> PrepareAsyncRead(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< flatbuffers::grpc::Message<ReadResponse>>>(PrepareAsyncReadRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientWriterInterface< flatbuffers::grpc::Message<WriteRequest>>* WriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<WriteRequest>>* AsyncWriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< flatbuffers::grpc::Message<WriteRequest>>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< flatbuffers::grpc::Message<ReadResponse>>* ReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< flatbuffers::grpc::Message<ReadResponse>>* AsyncReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< flatbuffers::grpc::Message<ReadResponse>>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< flatbuffers::grpc::Message<WriteRequest>>> Write(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response) {
      return std::unique_ptr< ::grpc::ClientWriter< flatbuffers::grpc::Message<WriteRequest>>>(WriteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<WriteRequest>>> AsyncWrite(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<WriteRequest>>>(AsyncWriteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<WriteRequest>>> PrepareAsyncWrite(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<WriteRequest>>>(PrepareAsyncWriteRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< flatbuffers::grpc::Message<ReadResponse>>> Read(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request) {
      return std::unique_ptr< ::grpc::ClientReader< flatbuffers::grpc::Message<ReadResponse>>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< flatbuffers::grpc::Message<ReadResponse>>> AsyncRead(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< flatbuffers::grpc::Message<ReadResponse>>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< flatbuffers::grpc::Message<ReadResponse>>> PrepareAsyncRead(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< flatbuffers::grpc::Message<ReadResponse>>>(PrepareAsyncReadRaw(context, request, cq));
    }
  
   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientWriter< flatbuffers::grpc::Message<WriteRequest>>* WriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response) override;
    ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<WriteRequest>>* AsyncWriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<WriteRequest>>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< flatbuffers::grpc::Message<ReadResponse>>* ReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request) override;
    ::grpc::ClientAsyncReader< flatbuffers::grpc::Message<ReadResponse>>* AsyncReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< flatbuffers::grpc::Message<ReadResponse>>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
  
  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReader< flatbuffers::grpc::Message<WriteRequest>>* reader, flatbuffers::grpc::Message<LookupResponse>* response);
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ReadRequest>* request, ::grpc::ServerWriter< flatbuffers::grpc::Message<ReadResponse>>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReader< flatbuffers::grpc::Message<WriteRequest>>* reader, flatbuffers::grpc::Message<LookupResponse>* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< flatbuffers::grpc::Message<LookupResponse>, flatbuffers::grpc::Message<WriteRequest>>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ReadRequest>* request, ::grpc::ServerWriter< flatbuffers::grpc::Message<ReadResponse>>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, flatbuffers::grpc::Message<ReadRequest>* request, ::grpc::ServerAsyncWriter< flatbuffers::grpc::Message<ReadResponse>>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef   WithAsyncMethod_Write<  WithAsyncMethod_Read<  Service   >   >   AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReader< flatbuffers::grpc::Message<WriteRequest>>* reader, flatbuffers::grpc::Message<LookupResponse>* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ReadRequest>* request, ::grpc::ServerWriter< flatbuffers::grpc::Message<ReadResponse>>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef   Service   StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< flatbuffers::grpc::Message<ReadRequest>, flatbuffers::grpc::Message<ReadResponse>>(std::bind(&WithSplitStreamingMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ReadRequest>* request, ::grpc::ServerWriter< flatbuffers::grpc::Message<ReadResponse>>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< flatbuffers::grpc::Message<ReadRequest>,flatbuffers::grpc::Message<ReadResponse>>* server_split_streamer) = 0;
  };
  typedef   WithSplitStreamingMethod_Read<  Service   >   SplitStreamedService;
  typedef   WithSplitStreamingMethod_Read<  Service   >   StreamedService;
};

}  // namespace fb_grpc_dnet


#endif  // GRPC_elliptics__INCLUDED
