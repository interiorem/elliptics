// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elliptics

#include "elliptics_generated.h"
#include "elliptics.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace fb_grpc_dnet {

static const char* Elliptics_method_names[] = {
  "/fb_grpc_dnet.Elliptics/Write",
  "/fb_grpc_dnet.Elliptics/Read",
};

std::unique_ptr< Elliptics::Stub> Elliptics::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Elliptics::Stub> stub(new Elliptics::Stub(channel));
  return stub;
}

Elliptics::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Write_(Elliptics_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Read_(Elliptics_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}
  
::grpc::ClientWriter< flatbuffers::grpc::Message<WriteRequest>>* Elliptics::Stub::WriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response) {
  return ::grpc::internal::ClientWriterFactory< flatbuffers::grpc::Message<WriteRequest>>::Create(channel_.get(), rpcmethod_Write_, context, response);
}

::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<WriteRequest>>* Elliptics::Stub::AsyncWriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< flatbuffers::grpc::Message<WriteRequest>>::Create(channel_.get(), cq, rpcmethod_Write_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< flatbuffers::grpc::Message<WriteRequest>>* Elliptics::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, flatbuffers::grpc::Message<LookupResponse>* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< flatbuffers::grpc::Message<WriteRequest>>::Create(channel_.get(), cq, rpcmethod_Write_, context, response, false, nullptr);
}

::grpc::ClientReader< flatbuffers::grpc::Message<ReadResponse>>* Elliptics::Stub::ReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request) {
  return ::grpc::internal::ClientReaderFactory< flatbuffers::grpc::Message<ReadResponse>>::Create(channel_.get(), rpcmethod_Read_, context, request);
}

::grpc::ClientAsyncReader< flatbuffers::grpc::Message<ReadResponse>>* Elliptics::Stub::AsyncReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< flatbuffers::grpc::Message<ReadResponse>>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true, tag);
}

::grpc::ClientAsyncReader< flatbuffers::grpc::Message<ReadResponse>>* Elliptics::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ReadRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< flatbuffers::grpc::Message<ReadResponse>>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false, nullptr);
}

Elliptics::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Elliptics_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Elliptics::Service, flatbuffers::grpc::Message<WriteRequest>, flatbuffers::grpc::Message<LookupResponse>>(
          std::mem_fn(&Elliptics::Service::Write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Elliptics_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Elliptics::Service, flatbuffers::grpc::Message<ReadRequest>, flatbuffers::grpc::Message<ReadResponse>>(
          std::mem_fn(&Elliptics::Service::Read), this)));
}

Elliptics::Service::~Service() {
}

::grpc::Status Elliptics::Service::Write(::grpc::ServerContext* context, ::grpc::ServerReader< flatbuffers::grpc::Message<WriteRequest>>* reader, flatbuffers::grpc::Message<LookupResponse>* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Elliptics::Service::Read(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ReadRequest>* request, ::grpc::ServerWriter< flatbuffers::grpc::Message<ReadResponse>>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fb_grpc_dnet

