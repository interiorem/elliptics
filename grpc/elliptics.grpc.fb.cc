// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: elliptics

#include "elliptics_generated.h"
#include "elliptics.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* Elliptics_method_names[] = {
  "/Elliptics/Lookup",
};

std::unique_ptr< Elliptics::Stub> Elliptics::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Elliptics::Stub> stub(new Elliptics::Stub(channel));
  return stub;
}

Elliptics::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_Lookup_(Elliptics_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status Elliptics::Stub::Lookup(::grpc::ClientContext* context, const flatbuffers::grpc::Message<LookupRequest>& request, flatbuffers::grpc::Message<LookupResponse>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Lookup_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<LookupResponse>>* Elliptics::Stub::AsyncLookupRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<LookupRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<LookupResponse>>::Create(channel_.get(), cq, rpcmethod_Lookup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<LookupResponse>>* Elliptics::Stub::PrepareAsyncLookupRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<LookupRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<LookupResponse>>::Create(channel_.get(), cq, rpcmethod_Lookup_, context, request, false);
}

Elliptics::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Elliptics_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Elliptics::Service, flatbuffers::grpc::Message<LookupRequest>, flatbuffers::grpc::Message<LookupResponse>>(
          std::mem_fn(&Elliptics::Service::Lookup), this)));
}

Elliptics::Service::~Service() {
}

::grpc::Status Elliptics::Service::Lookup(::grpc::ServerContext* context, const flatbuffers::grpc::Message<LookupRequest>* request, flatbuffers::grpc::Message<LookupResponse>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


